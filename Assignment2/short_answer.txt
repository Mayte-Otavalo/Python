


Q1. It is your choice to use either an ordered or unordered set. In a few sentences, what are some of the tradeoffs between the two? Additionally, please give an example (that has not been shown in lecture) of a valid hash function that could be used to hash student names for an unordered set.


Well first of all it is necessary to remember that the set structure helps to search for data in a set with non-repeated data,
therefore both ensure the completion of this task. As its name indicates in the unordered set, the information is stored without taking into account a specific order, it is done through a hash table, therefore the complexity is minimal and this is reflected in the speed of the search, but there are cases in which it is necessary for the information to have an order and this is where the ordered sets are useful, unlike the previous ones, they use red and black trees in their internal structure, no longer hash tables and the price of this order is paid with the search speed.



struct CustomHash {
  std::size_t operator()(const std::string& name) const {
      std::size_t hash = 0;
      for (char ch : name) {
          hash = hash * 31 + ch; //r
      }
      return hash;
  }



Q2. Note that we are saving pointers to names in the queue, not names themselves. Why might this be desired in this problem? What happens if the original set where the names are stored goes out of scope and the pointers are referenced?

It is desirable in this problem to handle the data in this way since it avoids copying the names again, which would take up more memory, not being efficient in relation to the task required and the position of the data set. However, if the data set is out of scope, there would be a problem since when referring to the pointers, they would return the data address with incorrect values ​​or could generate problems when executing the program.


